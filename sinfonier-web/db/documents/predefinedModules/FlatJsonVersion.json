{
   "versionTag":"1.0",
   "versionCode":1,
   "status":"predefined",
   "sourceType":"template",
   "sourceCode":"package com.sinfonier.bolts;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\n\r\n//@formatter:off\r\n/**\r\n* Flat a JSon. Change structure of Json to a flat json. \r\n* \u003cp\u003e XML Options:\u003cbr/\u003e\r\n* \u003cul\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003csources\u003e \u003csource\u003e \u003csourceId\u003e\u003c/sourceId\u003e \u003cgrouping field=\"field\"\u003e\u003c/grouping\u003e \u003c/source\u003e ... \u003c/sources\u003e}\u003c/b\u003e - Needed. Sources where this bolt must receive tuples. \u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003centity\u003e\u003c/entity\u003e}\u003c/b\u003e - Optional. Entity, in case you want to change it. \u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003cseparator\u003e\u003c/separator\u003e}\u003c/b\u003e - Optional. Default: _  Not possible \".\" (dot).\u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003cnumTasks\u003e\u003c/numTasks\u003e}\u003c/b\u003e - Optional. Num tasks of this bolt.\u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003cparalellism\u003e1\u003c/paralellism\u003e}\u003c/b\u003e - Needed. Parallelism.\u003c/li\u003e\r\n* \u003c/ul\u003e\r\n*/\r\n//@formatter:on\r\npublic class FlatJson extends BaseSinfonierBolt {\r\n\r\n    private char delimiter = '_';\r\n    private String entityName = \"\";\r\n    private Map\u003cString, Object\u003e flatJson;\r\n\r\n    public FlatJson(String xmlFile) {\r\n        super(xmlFile);\r\n    }\r\n\r\n    @Override\r\n    public void userprepare() {\r\n        String paramDelimiter = getParam(\"separator\");\r\n        if (null != paramDelimiter \u0026\u0026 !paramDelimiter.equals(\".\") \u0026\u0026 paramDelimiter.length() \u003c 2) {\r\n            delimiter = paramDelimiter.charAt(0);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void userexecute() {\r\n\r\n        flatJson = new HashMap\u003cString, Object\u003e();\r\n        Map\u003cString, Object\u003e json = getJson();\r\n        flatJson(json);\r\n        setJSon(flatJson);\r\n        emit();\r\n    }\r\n\r\n    @Override\r\n    public void usercleanup() {\r\n\r\n    }\r\n\r\n    public void flatJson(Map\u003cString, Object\u003e json) {\r\n        for (Iterator\u003cMap.Entry\u003cString, Object\u003e\u003e it = json.entrySet().iterator(); it.hasNext();) {\r\n            Map.Entry\u003cString, Object\u003e entry = it.next();\r\n            if (entry.getValue() instanceof Map) {\r\n                entityName = addEntity(entry.getKey());\r\n                json = (Map\u003cString, Object\u003e) entry.getValue();\r\n                flatJson(json);\r\n            } else {\r\n                flatJson.put(getFullKey(entry.getKey()), entry.getValue());\r\n            }\r\n        }\r\n\r\n        entityName = resetEntityName();\r\n    }\r\n\r\n    public String resetEntityName() {\r\n        int n = entityName.lastIndexOf(\".\");\r\n        return (n == -1) ? \"\" : entityName.substring(0, n);\r\n    }\r\n\r\n    private String addEntity(String newEntity) {\r\n        if (entityName.equals(\"\")) {\r\n            return newEntity;\r\n        } else {\r\n            return entityName + delimiter + newEntity;\r\n        }\r\n    }\r\n\r\n    private String getFullKey(String key) {\r\n        if (entityName.equals(\"\")) {\r\n            return key;\r\n        } else {\r\n            return entityName + delimiter + key;\r\n        }\r\n    }\r\n}",
   "sourceCodeUrl":"",
   "description":"Flat a Json using the separator",
   "created_at":{
      "$date":"2016-09-01T00:00:00.000Z"
   },
   "updated_at":{
      "$date":"2016-09-01T00:00:00.000Z"
   },
   "singleton":false,
   "topologies_count":0,
   "ticktuple":null,
   "fields":[
      {
         "name":"separator",
         "label":"Separator",
         "type":"string",
         "required":false,
         "wirable":false
      }
   ],
   "container":{
      "xtype":"WireIt.FormContainer",
      "type":"bolt",
      "icon":"/public/images/icons/bolt.png",
      "attributes":{
         "abstractionId":"flatjson",
         "class":"com.sinfonier.bolts.FlatJson"
      },
      "terminals":[
         {
            "name":"in[]",
            "nMaxWires":10,
            "offsetPosition":{
               "top":-15,
               "left":82
            },
            "ddConfig":{
               "type":"input",
               "allowedTypes":[
                  "output"
               ]
            },
            "direction":[
               0,
               -1
            ]
         },
         {
            "name":"out",
            "nMaxWires":10,
            "offsetPosition":{
               "bottom":-15,
               "left":82
            },
            "ddConfig":{
               "type":"output",
               "allowedTypes":[
                  "input"
               ]
            },
            "direction":[
               0,
               1
            ]
         }
      ]
   }
}