{
   "versionTag":"1.0",
   "versionCode":1,
   "status":"predefined",
   "sourceType":"template",
   "sourceCode":"package com.sinfonier.bolts;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n//@formatter:off\r\n/**\r\n* Trim an entity depending on action parameter.\r\n* \u003cp\u003e XML Options:\u003cbr/\u003e\r\n* \u003cul\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003csources\u003e \u003csource\u003e \u003csourceId\u003e\u003c/sourceId\u003e \u003cgrouping field=\"field\"\u003e\u003c/grouping\u003e \u003c/source\u003e ... \u003c/sources\u003e}\u003c/b\u003e - Needed. Sources where this bolt must receive tuples. \u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003caction\u003e\u003c/action\u003e}\u003c/b\u003e - Optional. Values: Allows, Delete. Default Allows. \u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003cfield\u003e\u003c/field\u003e\u003cfield\u003e...\u003c/field\u003e}\u003c/b\u003e - Needed. One label for each field.\u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003centity\u003e\u003c/entity\u003e}\u003c/b\u003e - Optional. Entity, in case you want to change it. \u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003cnumTasks\u003e\u003c/numTasks\u003e}\u003c/b\u003e - Optional. Num tasks of this bolt.\u003c/li\u003e\r\n* \u003cli\u003e \u003cb\u003e{@code \u003cparalellism\u003e1\u003c/paralellism\u003e }\u003c/b\u003e -Needed. Parallelism.\u003c/li\u003e\r\n* \u003c/ul\u003e\r\n*/\r\n//@formatter:on\r\npublic class Trim extends BaseSinfonierBolt {\r\n\r\n    private List\u003cString\u003e list;\r\n    private boolean allows = true;\r\n    private String entityName = \"\";\r\n\r\n    public Trim(String xmlFile) {\r\n        super(xmlFile);\r\n    }\r\n\r\n    @Override\r\n    public void userprepare() {\r\n        String action = getParam(\"action\").trim();\r\n        if (action.equalsIgnoreCase(\"delete\")) {\r\n            allows = false;\r\n        }\r\n\r\n        List\u003cObject\u003e fields = getParamList(\"field\");\r\n        list = new ArrayList\u003cString\u003e();\r\n        for (Object field : fields) {\r\n            list.add(((String) field).trim());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void userexecute() {\r\n\r\n        trimSelectedFields(getJson());\r\n        emit();\r\n    }\r\n\r\n    public void trimSelectedFields(Map\u003cString, Object\u003e json) {\r\n\r\n        // Iterate over map (json)\r\n        for (Iterator\u003cMap.Entry\u003cString, Object\u003e\u003e it = json.entrySet().iterator(); it.hasNext();) {\r\n            Map.Entry\u003cString, Object\u003e entry = it.next();\r\n\r\n            if (entry.getValue() instanceof Map) {\r\n                entityName = addEntity(entry.getKey());\r\n                trimSelectedFields((Map\u003cString, Object\u003e) entry.getValue());\r\n                if (((Map\u003cString, Object\u003e) entry.getValue()).size() == 0) {\r\n                    it.remove();\r\n                }\r\n            } else { // Leaf key\r\n                checkOptionsAndRemove(entry.getKey(), it);\r\n            }\r\n        }\r\n\r\n        entityName = resetEntityName();\r\n    }\r\n\r\n    public String resetEntityName() {\r\n        int n = entityName.lastIndexOf(\".\");\r\n        return (n == -1) ? \"\" : entityName.substring(0, n);\r\n    }\r\n\r\n    public void checkOptionsAndRemove(String key, Iterator\u003cMap.Entry\u003cString, Object\u003e\u003e it) {\r\n        if (isAllows() \u0026\u0026 !contains(list, key)) {\r\n            it.remove();\r\n        } else if (isDelete() \u0026\u0026 contains(list, key)) {\r\n            it.remove();\r\n        }\r\n    }\r\n\r\n    public boolean contains(List\u003cString\u003e keyList, String key) {\r\n        String currentKey = key;\r\n        for (String listKey : keyList) {\r\n            currentKey = \"\".equals(entityName) ? key : entityName + \".\" + key;\r\n            if (listKey.equals(currentKey)) {\r\n                return true;\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private String addEntity(String newEntity) {\r\n        if (entityName.equals(\"\")) {\r\n            return newEntity;\r\n        } else {\r\n            return entityName + \".\" + newEntity;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void usercleanup() {\r\n    }\r\n\r\n    /**\r\n     * Check if action parameter is Allows.\r\n     * \r\n     * @return {@code true} if is Allows.\r\n     */\r\n    public boolean isAllows() {\r\n        return allows;\r\n    }\r\n\r\n    /**\r\n     * Check if action parameter is Delete.\r\n     * \r\n     * @return {@code true} if is Delete.\r\n     */\r\n    public boolean isDelete() {\r\n        return !allows;\r\n    }\r\n\r\n}",
   "sourceCodeUrl":"",
   "description":"El objetivo de este [bolt](http://storm.incubator.apache.org/documentation/Concepts.html) es podar los elementos de la entidad para obtener en la salida del mismo una entidad con los elementos indicados. La filosofia puede ser seleccionar los que quieres eliminar (Delete), seleccionar solo los que quieres que continuen (Allow) o combinar ambas opciones",
   "created_at":{
      "$date":"2016-09-01T00:00:00.000Z"
   },
   "updated_at":{
      "$date":"2016-09-01T00:00:00.000Z"
   },
   "singleton":false,
   "topologies_count":0,
   "ticktuple":null,
   "fields":[
      {
         "name":"#",
         "label":"",
         "type":"combine",
         "required":false,
         "wirable":false,
         "fields":[
            {
               "name":"action",
               "type":"select",
               "typeInvite":" ",
               "choices":[
                  "Allows",
                  "Deletes"
               ]
            }
         ],
         "separators":[
            false,
            "&nbsp; the following fields"
         ]
      },
      {
         "name":"fields",
         "label":"Fields",
         "type":"list",
         "required":false,
         "wirable":false,
         "elementType":{
            "name":"field",        
            "label":"Field",
            "type":"string"
         }
      }
   ],
   "container":{
      "xtype":"WireIt.FormContainer",
      "type":"bolt",
      "icon":"/public/images/icons/bolt.png",
      "attributes":{
         "abstractionId":"trim",
         "class":"com.sinfonier.bolts.Trim"
      },
      "terminals":[
         {
            "name":"in[]",
            "nMaxWires":10,
            "offsetPosition":{
               "top":-15,
               "left":82
            },
            "ddConfig":{
               "type":"input",
               "allowedTypes":[
                  "output"
               ]
            },
            "direction":[
               0,
               -1
            ]
         },
         {
            "name":"out",
            "nMaxWires":10,
            "offsetPosition":{
               "bottom":-15,
               "left":82
            },
            "ddConfig":{
               "type":"output",
               "allowedTypes":[
                  "input"
               ]
            },
            "direction":[
               0,
               1
            ]
         }
      ]
   }
}